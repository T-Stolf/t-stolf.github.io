css
:root{
    --blue: rgb(1, 40, 77);
    --background-colour: black;
}*{
    font-family: helvetica;
  }
  /* collector combinations, select for things with 2 classes or a class and an id, .header.name{} or #cube.id HTMP selectors can be used in any combination */
  /* having 2 selectors with the same properties can be written together using a comma as such .heavy, .weight{} including the comma and space*/
  /* position has different types: static, relative, absolute, fixed, and sticky. fixed keeps items in the spot on screen forever, whereas sticky attaches to a position on the screen.*/
  /* pseudoselectors are used to add more dynamic reactions to an element. to add them put a : after a class or id, then add a descriptor such as nth child or link / visited */
  /* sibling selectors "~" are used to denote a selector style that comes in an area with a sibling (meaning they are contained within a parent).  a ~ b { color: red;}  denotes any a following a sibling that is b is coloured red*/
  /* follow selectors "+" are used to denote a selector style that comes immediately after another selector. a + b {color:red;} denotes any a following a b is coloured red*/
  /* child selectors ">" are used to denote a selector style that applies to all children of a selector. a > b{color:red;} denotes any child b of a is coloured red */
  /* descendant selectors " " are used to denote a selector syle that applies to any descendant selector. a b {colour:red;} denotes any descendant of a named b is coloured red*/
  /* attribute selection can also be used to denote style. for example: a[class=something], div[id=dumb], img[src="temp.png"] all work to define specific items based on their attributes*/
  /* attribute selection can be very powerful for styling multiple items contained in the same location (ie photos) when using the "^" symbol as it changes the form from "equals" to "contains" img[src =^"\image\"] will affect all items in the file image  */
  /* attribute selectors can also contain: $-ends with, *-contains somewhere, ~-contains separated by whitespace, |-starts with, and ends with a "-" */
  /* background size and background repeat, exactly what you expect*/
  
body{

    background: black;
    color: white;
    font-family: Arial;
    margin: 0 0 0 0;
    font-size: max(1.8vw, 18px);
}
button
{
    border: solid 3px rgb(185, 185, 185);
    border-width: 3px;
    background: none;
    color: white;
    border-radius: 5%;
    font-size: 1em;
    transition: background 2s ease, box-shadow 2s ease;
    box-shadow: 0px 0 50px rgb(179, 179, 179),
            inset 0 0 30px rgba(150, 150, 150, 0.5);
}
button:hover
{   
    border: solid 3pxrgb(0, 202, 34);
    background: rgb(119, 119, 119);
    box-shadow: 0px 0 50px rgb(151, 151, 151),
            inset 0 0 30px rgb(203, 204, 203);
}
ul
{
    list-style-type: none; 
    padding: 0 0 0 0;
} 
.header
{
    
    position: static;
    margin-left:min(500px, 20vw);
}
.colourTransparent
{
    background-color: rgba(97, 0, 161, 0.514);
    box-shadow: 0px 0 40px rgb(140, 0, 255);
}
.internalStuff
{
    display: grid;
    max-height: 1550px;
    grid-template-columns: repeat(4, 2fr); 
    grid-template-rows: 1fr 3fr 3fr 3fr 1fr;
    column-gap:min(30px, 3%);
    border-radius: 5%;
    
} 
.meImage
{
    grid-area: 2 / 2 / span 3 / span 1;
    max-width: 100%;
    max-height: 100%;

    min-width: 100px;
    min-height: 100px;
    border: 3px solid rgb(0, 0, 0);
    border-radius: 30%;
    justify-self: end;
    align-self:center;
}
.name
{   
    grid-area: 2 / 3 / span 2 / span 1;
    font-size: 1.8em;
    font-weight: 600;
    justify-self: start;
    align-self: center;
}
.occupation
{   
    grid-area: 4 / 3 / span 1 / span 1;
    font-size: 1em;
    font-weight: 600;

    border-top: 3px;
    border-bottom: 3px;
    border-left: 0px;
    border-right: 0px;
    border-style: solid;
    justify-self: start;
    align-self: center;
}
.mainsection
{
    margin-top: 1%;
    margin-left:min(500px, 20vw);
    display: grid;
    grid-template-columns: 1fr 7fr 1fr;
    grid-template-rows: auto;
    justify-content: space-around;
    align-content: center;
    row-gap: max(30px, 4%);

    border-radius: 5px;

    justify-items: center;
    align-items: center;
    padding: 10px 0 10px 0;
}
.I1
{
    /* grid-area: 1 / 2 / span 1 / span 1; */
    grid-column: 2;
    text-align: center;
    animation-delay: 0s;
}
.I2
{
    /* grid-area: 2 / 2 / span 1 / span 1; */
    grid-column: 2;
    text-align: center;
    animation-delay: -0.25s;
}
.I3
{
    /* grid-area: 3 / 2 / span 1 / span 1; */
    grid-column: 2;
    text-align: center;
    animation-delay: -0.5s;
}
.I4
{
    /* grid-area: 4 / 2 / span 1 / span 1; */
    grid-column: 2;
    text-align: center;
    animation-delay: -0.75s;
}
.mainButtons
{
    display: grid;
    grid-template-rows: 1fr 5fr;
    grid-template-columns: auto;
    align-items: center;
    justify-items: center;

    font-weight: 600;
    border-radius: 10%;
    background: none;
    color:white;

    /* filter: url(#wavey) blur(0.05em);   */
    
    padding: 0% 3% 1% 3%;
}
.blueGlow
{
    border: 3px solid rgb(0, 26, 255);
        /* inset 0 0 50px rgb(0, 68, 255);   */
    /* max-height: 1000px; */
    border-radius: 2vw;
    box-shadow: 0 0 50px rgb(0, 68, 255);
    transition: background 2s ease, padding 2s ease, border-radius 2s ease;
    animation: fire 5s linear infinite;

}
.blueGlow:hover
{
    padding: 1% 6% 3% 6%;
    border: 3px solid rgb(0, 26, 255);
    background: rgba(0, 26, 255, 0.479);
    /* inset 0 0 50px rgb(0, 68, 255);   */

    border-radius: 4vw;
    box-shadow: 0 0 50px rgb(0, 68, 255);
    animation: fire 5s linear infinite;
        size: 120%;
}
.blueGlow:active
{
    padding: 1% 6% 3% 6%;
    border: 3px solid rgb(0, 26, 255);
    background: rgba(0, 26, 255, 0.479);
    /* inset 0 0 50px rgb(0, 68, 255);   */

    border-radius: 4vw;
    box-shadow: 0 0 50px rgb(0, 68, 255);
    animation: fire 5s linear infinite;
        size: 120%;
}
.lightBlueGlow
{
    border: 3px solid rgb(0, 132, 255);
    border-radius: 2vw;
    box-shadow: 0 0 50px rgb(0, 132, 255);
    transition: background 2s ease, padding 2s ease, border-radius 2s ease;
    animation: lightfire 5s linear infinite;

}
.lightBlueGlow:hover
{
    padding: 1% 6% 3% 6%;
    border: 3px solid rgba(0, 174, 255, 0.89);
    background: rgba(0, 195, 255, 0.24);


    border-radius: 4vw;
    box-shadow: 0 0 50px rgba(0, 174, 255, 0.89);
    animation: lightfire 5s linear infinite;
        size: 120%;
}
.lightBlueGlow:active
{
    padding: 1% 6% 3% 6%;
    border: 3px solid rgba(0, 174, 255, 0.89);
    background: rgba(0, 195, 255, 0.24);


    border-radius: 4vw;
    box-shadow: 0 0 50px rgba(0, 174, 255, 0.89);
    animation: lightfire 5s linear infinite;
        size: 120%;
}
svg
{
    width:0;
    height:0;
}

.descriptor
{
    grid-area: 1 / 1 / span 1 / span 1;

    font-size: 1.3em;
    text-align: center;
    border-bottom: 3px;
    padding-top: 1%;
    margin:0;

    text-decoration: underline;
}
.buttonText
{
    grid-area: 2 / 1 / span 1 / span 1;
    text-align: center;
}

.contactbar
{
    position: fixed;
    padding: 0;
    margin: 0;
    width: 20vw;
    max-width: 500px;
    height: 100%;
    background-color: rgba(97, 0, 161, 0.514);
    display: grid; 
    align-items:center;
    justify-items:space-between;
    box-shadow: 0 0 40px rgb(140, 0, 255);
    transition: background 2s ease, box-shadow 2s ease;

}
.contactbar:hover
{
    background: rgba(120, 0, 219, 0.699); 
    box-shadow: 0 0 50px rgb(140, 0, 255); 
}
.contactItem
{
    display: flex;
    align-items: center;
    justify-items: center;
    align-content: center;
    justify-content: center;
    height: 10vh;
    width: 10vh;
    max-width: 500px;
    max-height: 500px;
}
.contactButton
{
    height: 70%;
    width: 70%; 
    border: solid 3px rgb(202, 13, 0);
    background: none;
    box-shadow: 0px 0 10px rgb(202, 13, 0),
            inset 0 0 5px rgb(202, 61, 36);
}
.contactButton:hover
{
    border: solid 3px rgb(202, 13, 0);
    background: rgba(200, 18, 0, 0.61);
    box-shadow: 0px 0 20px rgb(202, 13, 0),
            inset 0 0 10px rgb(202, 61, 36);
}

.contactImg
{
    height: 80%;
    width: 80%;
}
#goback 
{
    grid-column: 2;
    padding: 1% 1% 1% 1%;
    justify-items: center;
    align-items: center;
    border: solid 3px rgb(0, 202, 34);
    transition: background 2s ease, box-shadow 2s ease;
    box-shadow: 0px 0 15px rgb(0, 202, 34),
            inset 0 0 8px rgb(0, 202, 34);
}
#goback:hover{
    border: solid 3pxrgb(0, 202, 34);
    background: rgba(65, 228, 1, 0.61);
    box-shadow: 0px 0 20px rgb(0, 202, 34),
            inset 0 0 12px rgb(0, 202, 34);

}
.Type
{
    text-decoration: underline;
    font-size: 1.2em;
    font-weight:700;
}
.Location
{
    font-weight:700;
}
.TimePeriod
{
    font-weight:600;   
}
.video
{
    max-width: 55vw;
    max-height: 40vh;
}
::-webkit-scrollbar
{
    width: 20px;
}

::-webkit-scrollbar-track
{
    background: rgb(96, 109, 121);
    border-radius: 10px;
}
::-webkit-scrollbar-thumb
{
    background: rgb(0, 71, 202);
    border-radius: 10px;
}
::-webkit-scrollbar-thumb:hover{
    transition: background 2s ease;
    background:rgb(2, 86, 241);
}

@keyframes fire
{
    0% 
    { 
        box-shadow: 0 0 5vw rgb(0, 68, 255),
            inset 0 0 4vw rgb(0, 68, 255); 
            filter: huerotate(0deg);
    }
    20% 
    { 
        box-shadow: 0 0 6vw rgb(0, 68, 255),
            inset 0 0 3vw rgb(0, 68, 255); 
            filter: huerotate(10deg);
    }
    40% 
    { 
        box-shadow: 0 0 4vw rgb(0, 68, 255),
            inset 0 0 2vw rgb(0, 68, 255); 
            filter: huerotate(20deg);
    }
    60% 
    { 
        box-shadow: 0 0 8vw rgb(0, 68, 255),
            inset 0 0 6vw rgb(0, 68, 255); 
            filter: huerotate(30deg);
    }
    80% 
    { 
        box-shadow: 0 0 10vw rgb(0, 68, 255),
            inset 0 0 8vw rgb(0, 68, 255); 
            filter: huerotate(20deg);
    }
    100% 
    { 
        box-shadow: 0 0 5vw rgb(0, 68, 255),
            inset 0 0 4vw rgb(0, 68, 255); 
            filter: huerotate(10deg);
    }
}
@keyframes lightfire
{
    0%
    {
        box-shadow: 0 0 2vw rgb(0, 217, 255),
            inset 0 0 1vw rgba(0, 217, 255, 0.6); 
            filter: huerotate(0deg);
    }
    14% 
    { 
        box-shadow: 0 0 3vw rgb(0, 217, 255),
            inset 0 0 2vw rgba(0, 217, 255, 0.6); 
            filter: huerotate(0deg);
    }
    28% 
    { 
        box-shadow: 0 0 6vw rgb(0, 217, 255),
            inset 0 0 2.5vw rgba(0, 217, 255, 0.6); 
            filter: huerotate(10deg);
    }
    42% 
    { 
        box-shadow: 0 0 8vw rgb(0, 217, 255),
            inset 0 0 3vw rgba(0, 217, 255, 0.6); 
            filter: huerotate(20deg);
    }
    56% 
    { 
        box-shadow: 0 0 6vw rgb(0, 217, 255),
            inset 0 0 4vw rgba(0, 217, 255, 0.6); 
            filter: huerotate(30deg);
    }
    70% 
    { 
        box-shadow: 0 0 4vw rgb(0, 217, 255),
            inset 0 0 3vw rgba(0, 217, 255, 0.6); 
            filter: huerotate(20deg);
    }
    84% 
    { 
        box-shadow: 0 0 3vw rgb(0, 217, 255),
            inset 0 0 2vw rgba(0, 217, 255, 0.6); 
            filter: huerotate(10deg);
    }
    100%
    {
        box-shadow: 0 0 2vw rgb(0, 217, 255),
            inset 0 0 1vw rgba(0, 217, 255, 0.6); 
            filter: huerotate(10deg);
    }


}
/*.borders{

    content: url(.mainButtons); 
    width:100%;
    height:100%;

    border: 5px solid rgb(0, 26, 255);
    border-radius: 10%;
    box-shadow: 0 0 50px rgb(0, 68, 255);

    animation: fire 5s linear infinite;
    filter: url(#wavey) blur(0.05em);  

}

.borders::before
{
    border: 5px solid rgb(0, 26, 255);
    border-radius: 10%;
    box-shadow: 0 0 50px rgb(0, 34, 129);

    animation: fire 5s linear infinite;
    filter: url(#wavey) blur(0.05em);  
}
.borders::after
{
    border: 5px solid rgb(0, 26, 255);
    border-radius: 10%;
    box-shadow: 0 0 50px rgb(64, 67, 73);
       
    animation: fire 5s linear infinite;
    filter: url(#wavey) blur(0.05em); 
} */
